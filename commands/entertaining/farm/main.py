from aiogram import Dispatcher, types
from commands.entertaining.earnings.farm.db import *
from commands.db import get_balance, url_name, get_name
from commands.main import win_luser
from assets import kb
from assets.antispam import antispam_earning, new_earning_msg, antispam
from bot import bot


@antispam
async def ferma_list(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    await message.answer(f'''{url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É –∏ —É–ª—É—á—à–∞—Ç—å –µ—ë. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É, —Ü–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ 500.000.000$. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ—è —Ñ–µ—Ä–º–∞" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ—ë –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–µ—Ä–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_ferma(message):
    uid = message.from_user.id
    url = await url_name(uid)
    rwin, rloser = await win_luser()
    data = await getferm(uid)
    if not data:
        return await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π —Ñ–µ—Ä–º—ã —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É" {rloser}')

    if data[3] != 0: dox = int(3000 * (data[3] ** 2.5))
    else: dox = 3000
    ch = int(500000000 * (1 + 0.15) ** (data[3]))
    ch2 = '{:,}'.format(ch).replace(',', '.')
    balance = '{:,}'.format(int(data[1])).replace(',', '.')
    nalogs = '{:,}'.format(int(data[2])).replace(',', '.')
    cards = '{:,}'.format(data[3]).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')

    msg = await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π "–ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞":
üí∑ –î–æ—Ö–æ–¥: {dox}‡∏ø/—á–∞—Å
üìù –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: {cards} —à—Ç./‚ôæÔ∏è —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ch2}$

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ù–∞ —Å—á–µ—Ç—É: {balance}‡∏ø''', reply_markup=kb.ferma(uid))
    await new_earning_msg(msg.chat.id, msg.message_id)


async def upd_ferma_text(call: types.CallbackQuery):
    uid = call.from_user.id
    url = await url_name(uid)
    data = await getferm(uid)
    if not data:
        return

    if data[3] != 0: dox = int(3000 * (data[3] ** 2.5))
    else: dox = 3000

    ch = int(500000000 * (1 + 0.15) ** (data[3] - 1))
    ch2 = '{:,}'.format(ch).replace(',', '.')
    balance = '{:,}'.format(int(data[1])).replace(',', '.')
    nalogs = '{:,}'.format(int(data[2])).replace(',', '.')
    cards = '{:,}'.format(data[3]).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')

    try: await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''
{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π "–ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞":
üí∑ –î–æ—Ö–æ–¥: {dox}‡∏ø/—á–∞—Å
üìù –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: {cards} —à—Ç./‚ôæÔ∏è —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ch2}$

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ù–∞ —Å—á–µ—Ç—É: {balance}‡∏ø''', reply_markup=kb.ferma(uid))
    except: pass


@antispam
async def buy_ferma(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    data = await getferm(user_id)
    rwin, rloser = await win_luser()
    if data:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–µ—Ä–º–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—è —Ñ–µ—Ä–º–∞" {rloser}')
    else:
        balance = await get_balance(user_id)
        if balance < 500000000:
            await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ñ–µ—Ä–º—ã. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å 500.000.000$ {rloser}')
        else:
            await buy_ferma_db(user_id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ñ–µ—Ä–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—è —Ñ–µ—Ä–º–∞" {rwin}')


@antispam_earning
async def buy_cards(call: types.CallbackQuery):
    user_id = call.from_user.id
    url = await get_name(user_id)
    data = await getferm(user_id)
    rwin, rloser = await win_luser()

    if not data:
        return

    ch = int(500000000 * (1 + 0.15) ** (data[3] - 1))
    ch2 = '{:,}'.format(ch).replace(',', '.')
    balance = await get_balance(user_id)
    if balance < ch:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å {ch2}$ {rloser}')
    else:
        await buy_cards_db(user_id, ch)
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ —Ñ–µ—Ä–º–µ –∑–∞ {ch2}$ {rwin}')
        await upd_ferma_text(call)


@antispam_earning
async def snyt_pribl_ferma(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    data = await getferm(user_id)
    rwin, rloser = await win_luser()

    if not data:
        return

    if data[1] == 0:
        await bot.answer_callback_query(call.id, text=f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–π —Ñ–µ—Ä–º—ã –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}')
    else:
        balance2 = '{:,}'.format(data[1]).replace(',', '.')
        await snyt_pribl_ferma_db(user_id, data[1])
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2}‡∏ø —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–π —Ñ–µ—Ä–º—ã {rwin}')
        await upd_ferma_text(call)


@antispam_earning
async def oplata_nalogov_ferma(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    data = await getferm(user_id)
    rwin, rloser = await win_luser()

    if not data:
        return

    nalogs2 = '{:,}'.format(data[2]).replace(',', '.')
    balance = await get_balance(user_id)

    if balance < data[2]:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}')
        return

    if data[2] == 0:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}')
    else:
        await oplata_nalogs_ferma_db(user_id, data[2])
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}')
        await upd_ferma_text(call)


def reg(dp: Dispatcher):
    dp.register_message_handler(my_ferma, lambda message: message.text.lower().startswith('–º–æ—è —Ñ–µ—Ä–º–∞'))
    dp.register_message_handler(ferma_list, lambda message: message.text.lower().startswith(('—Ñ–µ—Ä–º–∞', '—Ñ–µ—Ä–º—ã')))
    dp.register_message_handler(buy_ferma, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É'))
    dp.register_callback_query_handler(buy_cards, text_startswith='ferma-bycards')
    dp.register_callback_query_handler(snyt_pribl_ferma, text_startswith='ferma-sobrat')
    dp.register_callback_query_handler(oplata_nalogov_ferma, text_startswith='ferma-nalog')
