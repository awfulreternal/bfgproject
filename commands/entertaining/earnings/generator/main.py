from aiogram import types, Dispatcher
from bot import bot
import commands.entertaining.earnings.generator.db as db
from commands.db import url_name, get_balance, get_name
from commands.main import win_luser
from assets import kb
from assets.antispam import new_earning_msg, antispam, antispam_earning


@antispam
async def generator_list(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    await message.answer(f'''{url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ —É–ª—É—á—à–∞—Ç—å –µ–≥–æ. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –æ–Ω –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –∫–∞–∫ –∏ –ø—Ä–µ–∂–¥–µ 2.000 –º–∞—Ç–µ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_generator(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgenerator(user_id)

    if not data:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {rloser}')
        return

    dox = int((data[0] + 1) * 20)
    balance = '{:,}'.format(int(data[1])).replace(',', '.')
    nalogs = '{:,}'.format((int(data[2]))).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')

    msg = await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∏":
üí∑ –î–æ—Ö–æ–¥: {dox} –º–∞—Ç–µ—Ä–∏–∏/—á–∞—Å
üíº –¢—É—Ä–±–∏–Ω—ã: {data[0]} —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: 2000 üåå

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ù–∞ —Å—á–µ—Ç—É: {balance} –º–∞—Ç–µ—Ä–∏–∏''', reply_markup=kb.generator(user_id))
    await new_earning_msg(msg.chat.id, msg.message_id)


async def edit_generator_msg(call: types.CallbackQuery):
    user_id = call.from_user.id
    url = await url_name(user_id)
    data = await db.getgenerator(user_id)

    if not data:
        return

    dox = int((data[0] + 1) * 20)
    balance = '{:,}'.format(int(data[1])).replace(',', '.')
    nalogs = '{:,}'.format((int(data[2]))).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''
{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∏":
üí∑ –î–æ—Ö–æ–¥: {dox} –º–∞—Ç–µ—Ä–∏–∏/—á–∞—Å
üíº –¢—É—Ä–±–∏–Ω—ã: {data[0]} —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: 2000 üåå

üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ù–∞ —Å—á–µ—Ç—É: {balance} –º–∞—Ç–µ—Ä–∏–∏''', reply_markup=kb.generator(user_id))


@antispam
async def buy_generator(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgenerator(user_id)

    if data:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä" {rloser}')
        return

    balance = await db.getonlimater(user_id)
    if balance < 2000:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 2.000 –º–∞—Ç–µ—Ä–∏–∏ {rloser}')
    else:
        await db.buy_generator_db(user_id)
        await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä" {rwin}')


@antispam_earning
async def buy_turbine(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    gen = await db.getgenerator(user_id)

    if not gen:
        return

    if gen[0] >= 10:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–±–∏–Ω {rloser}')
        return

    ch = 2000  # —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 —Ç—É—Ä–±–∏–Ω—ã
    balance = await db.getonlimater(user_id)

    if balance < ch:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—É—Ä–±–∏–Ω—ã. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å 2.000 –º–∞—Ç–µ—Ä–∏–∏ {rloser}')
        return

    ch2 = '{:,}'.format(ch).replace(',', '.')
    await db.buy_turbine_db(user_id)
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç—É—Ä–±–∏–Ω—É –∑–∞ {ch2}üåå {rwin}')
    await edit_generator_msg(call)


@antispam_earning
async def snyt_pribl(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    gen = await db.getgenerator(user_id)

    if not gen:
        return

    if gen[1] <= 0:
        await bot.answer_callback_query(call.id, text=f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}')
        return

    balance2 = '{:,}'.format(gen[1]).replace(',', '.')
    await db.snyt_pribl_gen_db(user_id, gen[1])
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2}üåå —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {rwin}')
    await edit_generator_msg(call)


@antispam_earning
async def oplata_nalogov(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    gen = await db.getgenerator(user_id)

    if not gen:
        return

    balance = await get_balance(user_id)
    if balance < gen[2]:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}')
        return

    if gen[2] == 0:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}')
        return

    nalogs2 = '{:,}'.format(gen[2]).replace(',', '.')
    await db.oplata_nalogs_gen_db(user_id, gen[2])
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}')
    await edit_generator_msg(call)


def reg(dp: Dispatcher):
    dp.register_message_handler(my_generator, lambda message: message.text.lower().startswith('–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'))
    dp.register_message_handler(generator_list, lambda message: message.text.lower().startswith('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'))
    dp.register_message_handler(buy_generator, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'))
    dp.register_callback_query_handler(snyt_pribl, text_startswith='generator-sobrat')
    dp.register_callback_query_handler(buy_turbine, text_startswith='generator-buy-turb')
    dp.register_callback_query_handler(oplata_nalogov, text_startswith='generator-nalog')
