from aiogram import types, Dispatcher
import commands.entertaining.earnings.garden.db as db
from commands.db import url_name, get_balance, get_name
from commands.main import win_luser
from assets import kb
from assets.antispam import antispam_earning, antispam, new_earning_msg
from bot import bot


@antispam
async def harden_list(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    await message.answer(f'''{url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥ –∏ —É–ª—É—á—à–∞—Ç—å –µ–≥–æ. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥, —Ü–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ 1.000.000.000$. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ–π —Å–∞–¥" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–∞–¥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_garden(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if not data:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" {rloser}')
        return

    water, tree, nalogs, balance = data[0], data[1], data[2], data[3]

    dox = (tree + 1) * 3
    balance = int(balance)
    nalogs = int(nalogs)
    balance = '{:,}'.format(balance).replace(',', '.')
    nalogs = '{:,}'.format(nalogs).replace(',', '.')

    ch = int(1000000000 * (1 + 0.15) ** (tree + 1))
    ch2 = '{:,}'.format(ch).replace(',', '.')

    msg = await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–°–∞–¥":
ü•ú –î–æ—Ö–æ–¥: {dox} –∑—ë—Ä–µ–Ω/—á–∞—Å
üå≥ –î–µ—Ä–µ–≤—å—è: {tree} —à—Ç./10 —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ch2}$

üí¶ –í–æ–¥—ã: {water}/100
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üß∫ –ù–∞ —Å—á–µ—Ç—É: {balance} –∑—ë—Ä–µ–Ω

‚≠ê –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏–Ω–∞—á–µ –æ–Ω–æ –∑–∞—Å–æ—Ö–Ω–µ—Ç.''', reply_markup=kb.garden(user_id))
    await new_earning_msg(msg.chat.id, msg.message_id)


async def upd_garden_text(call: types.CallbackQuery):
    uid = call.from_user.id
    url = await url_name(uid)
    data = await db.getgarden(uid)

    if not data:
        return

    water, tree, nalogs, balance = data[0], data[1], data[2], data[3]

    dox = (tree + 1) * 3
    balance = int(balance)
    nalogs = int(nalogs)
    balance = '{:,}'.format(balance).replace(',', '.')
    nalogs = '{:,}'.format(nalogs).replace(',', '.')

    ch = int(1000000000 * (1 + 0.15) ** (tree + 1))
    ch2 = '{:,}'.format(ch).replace(',', '.')

    try: await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''
{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–°–∞–¥":
ü•ú –î–æ—Ö–æ–¥: {dox} –∑—ë—Ä–µ–Ω/—á–∞—Å
üå≥ –î–µ—Ä–µ–≤—å—è: {tree} —à—Ç./10 —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ch2}$

üí¶ –í–æ–¥—ã: {water}/100
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üß∫ –ù–∞ —Å—á–µ—Ç—É: {balance} –∑—ë—Ä–µ–Ω

‚≠ê –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏–Ω–∞—á–µ –æ–Ω–æ –∑–∞—Å–æ—Ö–Ω–µ—Ç.''', reply_markup=kb.garden(uid))
    except: pass


@antispam
async def buy_garden(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if data:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∞–¥. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {rloser}')
        return

    balance = await get_balance(user_id)
    if balance < 1000000000:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –°–∞–¥–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1.00.000.000$ {rloser}')
    else:
        await db.buy_garden_db(user_id)
        await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å–∞–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {rwin}')


@antispam_earning
async def buy_tree(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if not data:
        return

    if data[1] == 10:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ {rloser}')
        return

    ch = int(1000000000 * (1 + 0.15) ** (data[1] + 1))
    ch2 = '{:,}'.format(ch).replace(',', '.')
    balance = await get_balance(user_id)

    if balance < ch:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ä–µ–≤–∞. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å {ch2}$ {rloser}')
    else:
        await db.buy_tree_db(user_id, ch)
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≤–∞—à–µ–º —Å–∞–¥—É –∑–∞ {ch2}$ {rwin}')
        await upd_garden_text(call)


@antispam_earning
async def snyt_pribl_garden(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if not data:
        return

    if data[3] == 0:
        await bot.answer_callback_query(call.id, text=f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}')
    else:
        balance2 = '{:,}'.format(data[3]).replace(',', '.')
        await db.snyt_pribl_garden_db(user_id, data[3])
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2} –∑—ë—Ä–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ {rwin}')
        await upd_garden_text(call)


@antispam_earning
async def polit_dereva_garden(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if not data:
        return

    if data[0] == 100:
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rloser}')
    else:
        await db.politderevo(user_id)
        await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rwin}')
        await upd_garden_text(call)


@antispam
async def polit_dereva_garden_2(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)

    if not data:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤—å—è {rloser}')
        return

    if data[0] == 100:
        await message.answer(f'{url}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rloser}')
    else:
        await db.politderevo(user_id)
        await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rwin}')


@antispam_earning
async def oplata_nalogov_garden(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.getgarden(user_id)
    balance = await get_balance(user_id)

    if not data:
        return

    if balance < data[2]:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}')
        return

    if data[2] == 0:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}')
        return

    nalogs2 = '{:,}'.format(data[2]).replace(',', '.')
    await db.oplata_nalogs_garden_db(user_id, data[2])
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}')
    await upd_garden_text(call)


def reg(dp: Dispatcher):
    dp.register_message_handler(polit_dereva_garden_2, lambda message: message.text.lower().startswith('—Å–∞–¥ –ø–æ–ª–∏—Ç—å'))
    dp.register_message_handler(harden_list, lambda message: message.text.lower().startswith('—Å–∞–¥'))
    dp.register_message_handler(my_garden, lambda message: message.text.lower().startswith('–º–æ–π —Å–∞–¥'))
    dp.register_message_handler(buy_garden, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥'))
    dp.register_callback_query_handler(buy_tree, text_startswith='garden-buy-tree')
    dp.register_callback_query_handler(polit_dereva_garden, text_startswith='garden-polit')
    dp.register_callback_query_handler(snyt_pribl_garden, text_startswith='garden-sobrat')
    dp.register_callback_query_handler(oplata_nalogov_garden, text_startswith='garden-nalog')
