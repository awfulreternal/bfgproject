from aiogram import types, Dispatcher
from bot import bot
from commands.entertaining.earnings.tree import db
from commands.db import url_name, get_balance, get_name
from commands.main import win_luser
from assets import kb
from assets.antispam import new_earning_msg, antispam, antispam_earning


@antispam
async def my_tree(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)

    if not data:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ {rloser}')
        return

    dox = int(3000 * (data[3] ** 3.8))
    tre_price = int(5000 * (data[3] ** 3.8))
    ter_price = int(5000 * (data[2] ** 3.8))

    balance = '{:,}'.format(int(data[0])).replace(',', '.')
    nalogs = '{:,}'.format((int(data[1]))).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')
    tre_price = '{:,}'.format(tre_price).replace(',', '.')
    ter_price = '{:,}'.format(ter_price).replace(',', '.')
    yen = '{:,}'.format(data[4]).replace(',', '.')

    msg = await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ "–î–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ":
üè° –£—á–∞—Å—Ç–æ–∫: {data[2]} –º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ter_price} ‚ò£Ô∏è
üå≥ –†–∞–∑–º–µ—Ä –¥–µ—Ä–µ–≤–∞: {data[3]} –º
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tre_price} ‚ò£Ô∏è

üí∑ –î–æ—Ö–æ–¥: {dox}$
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ü—Ä–∏–±—ã–ª—å: {balance}$
üí¥ –ô–µ–Ω—ã: {yen}¬•''', reply_markup=kb.tree(user_id))
    await new_earning_msg(msg.chat.id, msg.message_id)


async def edit_tree_msg(call: types.CallbackQuery):
    user_id = call.from_user.id
    url = await url_name(user_id)
    data = await db.gettree(user_id)

    if not data:
        return

    dox = int(3000 * (data[3] ** 3.8))
    tre_price = int(5000 * (data[3] ** 3.8))
    ter_price = int(5000 * (data[2] ** 3.8))

    balance = '{:,}'.format(int(data[0])).replace(',', '.')
    nalogs = '{:,}'.format((int(data[1]))).replace(',', '.')
    dox = '{:,}'.format(dox).replace(',', '.')
    tre_price = '{:,}'.format(tre_price).replace(',', '.')
    ter_price = '{:,}'.format(ter_price).replace(',', '.')
    yen = '{:,}'.format(data[4]).replace(',', '.')

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''
{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ "–î–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ":
üè° –£—á–∞—Å—Ç–æ–∫: {data[2]} –º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {ter_price} ‚ò£Ô∏è
üå≥ –†–∞–∑–º–µ—Ä –¥–µ—Ä–µ–≤–∞: {data[3]} –º
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tre_price} ‚ò£Ô∏è

üí∑ –î–æ—Ö–æ–¥: {dox}$
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üí∞ –ü—Ä–∏–±—ã–ª—å: {balance}$
üí¥ –ô–µ–Ω—ã: {yen}¬•''', reply_markup=kb.tree(user_id))


@antispam
async def buy_tree(message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)

    if data:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—ë –¥–µ—Ä–µ–≤–æ" {rwin}')
        return

    balance = await db.getonlibiores(user_id)
    if balance < 500_000_000:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. '
                             f'–ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 500.000.000 –∫–≥ –±–∏–æ—Ä–µ—Å—É—Ä—Å–∞ {rloser}')
        return

    await db.buy_tree_db(user_id)
    await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—ë –¥–µ—Ä–µ–≤–æ" {rwin}')


@antispam_earning
async def snyt_pribl(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)

    if not data:
        return

    if data[0] <= 0 and data[4] <= 0:
        await bot.answer_callback_query(call.id, text=f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}')
        return

    balance2 = '{:,}'.format(data[0]).replace(',', '.')
    yen2 = '{:,}'.format(data[4]).replace(',', '.')

    await db.snyt_pribl_db(user_id, data[0], data[4])
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2}$ –∏ {yen2}¬• —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ {rwin}')
    await edit_tree_msg(call)


@antispam_earning
async def oplata_nalogov(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)
    balance = await get_balance(user_id)

    if not data:
        return

    if balance < data[1]:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}')
        return

    if data[1] <= 0:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}')
        return

    nalogs2 = '{:,}'.format(data[2]).replace(',', '.')
    await db.oplata_nalogs_db(user_id, data[1])
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}')
    await edit_tree_msg(call)


@antispam_earning
async def buy_ter(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)

    if not data:
        return

    balance = await db.getonlibiores(user_id)
    summ = int(5000 * (data[2] ** 3.8))

    if balance < summ:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ {rloser}')
        return

    summ2 = '{:,}'.format(summ).replace(',', '.')
    await db.buy_ter_db(user_id, summ)
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ —É—á–∞—Å—Ç–æ–∫ –∑–∞ {summ2}$ {rwin}')
    await edit_tree_msg(call)


@antispam_earning
async def buy_tree_call(call):
    user_id = call.from_user.id
    url = await get_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.gettree(user_id)

    if not data:
        return

    balance = await db.getonlibiores(user_id)
    summ = int(5000 * (data[3] ** 3.8))

    if balance < summ:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ {rloser}')
        return

    if data[2] <= data[3]:
        await bot.answer_callback_query(call.id, text=f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ {rloser}')
        return

    summ2 = '{:,}'.format(summ).replace(',', '.')
    await db.buy_tree_ter_db(user_id, summ)
    await bot.answer_callback_query(call.id, text=f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–µ—Ä–µ–≤–æ –∑–∞ {summ2}$ {rwin}')
    await edit_tree_msg(call)


def reg(dp: Dispatcher):
    dp.register_message_handler(my_tree, lambda message: message.text.lower().startswith('–º–æ—ë –¥–µ—Ä–µ–≤–æ'))
    dp.register_message_handler(buy_tree, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—á–∞—Å—Ç–æ–∫'))
    dp.register_callback_query_handler(snyt_pribl, text_startswith='tree-sobrat')
    dp.register_callback_query_handler(oplata_nalogov, text_startswith='tree-nalog')
    dp.register_callback_query_handler(buy_tree_call, text_startswith='tree-tree')
    dp.register_callback_query_handler(buy_ter, text_startswith='tree-ter')