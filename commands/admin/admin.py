import asyncio
import sys
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup
from commands.admin.db import *
import config as cfg
from bot import bot

from assets.antispam import earning_msg
from assets.gettime import bonus_time, kazna_time
from commands.help import help_msg


class new_ads_state(StatesGroup):
    txt = State()


class Mailing(StatesGroup):
    mailing_text = State()
    mailing_conf = State()


async def new_ads(message, state: FSMContext, type=0):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if type == 0:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã ('-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å)\n\n"
                             "<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.</i>", reply_markup=keyboard)
        await new_ads_state.txt.set()
        return

    txt = message.text
    if txt == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await admin_menu(message)
        return

    txt = '' if txt == '-' else txt
    try:
        ads = txt.replace(r'\n', '\n')
        msg = '‚öôÔ∏è –†–µ–∫–ª–∞–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É–¥–∞–ª–µ–Ω–∞' if txt == '' else '‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n\n' + ads
        await message.answer(msg, disable_web_page_preview=True)
        await upd_ads(txt)
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ HTML')

    await state.finish()
    await admin_menu(message)


async def unloading(message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if message.chat.type != 'private':
        return

    time = datetime.now().strftime("%Y-%m-%d –≤ %H:%M:%S")
    with open('users.db', 'rb') as file:
        await bot.send_document(message.chat.id, file, caption=f'üõ° –ö–æ–ø–∏—è –±–¥ —Å–æ–∑–¥–∞–Ω–∞ <blockquote>{time}</blockquote>')


async def admin_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='üìç –†–∞—Å—Å—ã–ª–∫–∞'), types.KeyboardButton(text='üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')],
            [types.KeyboardButton(text='‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã'), types.KeyboardButton(text='üì• –í—ã–≥—Ä—É–∑–∫–∞')],
            [types.KeyboardButton(text='‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')]
        ],
        resize_keyboard=True
    )

    await message.answer('<b>üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é:</b>', reply_markup=keyboard)


async def control(message: types.Message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), types.KeyboardButton("üíΩ –û–ó–£"))
    keyboard.add(types.KeyboardButton("üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"))

    await message.answer('<b>üïπÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>', reply_markup=keyboard)


def sizeof_fmt(num):
    for unit in ['–ë', '–ö–ë', '–ú–ë']:
        if abs(num) < 1024.0:
            return "%3.1f %s" % (num, unit)
        num /= 1024.0
    return "%.1f %s" % (num, '–¢–ë')


async def RAM_control(message: types.Message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="ram-clear"))

    earning = sizeof_fmt(sys.getsizeof(earning_msg))
    help_menu = sizeof_fmt(sys.getsizeof(help_msg))
    bonus = sizeof_fmt(sys.getsizeof(bonus_time))
    kazna = sizeof_fmt(sys.getsizeof(kazna_time))

    await message.answer(f'''üíΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –û–ó–£:
üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earning}
üÜò –ü–æ–º–æ—â—å: {help_menu}
üéÅ –ë–æ–Ω—É—Å—ã: {bonus}
üí∞ –ö–∞–∑–Ω–∞: {kazna}''', reply_markup=keyboard)


async def RAM_clear(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in cfg.admin:
        return

    global earning_msg, help_msg, bonus_time, kazna_time
    earning_msg.clear()
    help_msg.clear()
    bonus_time.clear()
    kazna_time.clear()

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üóë –û—á–∏—â–µ–Ω–æ!')


async def rassilka(message: types.Message):
    await Mailing.mailing_text.set()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    await message.answer('üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=keyboard)


async def process_rassilka(message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.')
        await admin_menu(message)
        return

    inline_keyboard = None
    if message.reply_markup and message.reply_markup.inline_keyboard:
        inline_keyboard = message.reply_markup.inline_keyboard
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await state.update_data(text=text, inline_keyboard=inline_keyboard)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (–¥–∞/–Ω–µ—Ç)")
    await Mailing.mailing_conf.set()


async def process_rassilka2(message, state: FSMContext):
    data = await state.get_data()
    await state.finish()

    if message.text.lower() != '–¥–∞':
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    users, chats = await get_users_chats()

    ucount, uerror = 0, 0,
    ucount2, uerror2 = 0, 0

    await message.answer("‚ú® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    await admin_menu(message)

    for user_id in users:
        try:
            await bot.send_message(user_id[0], data['text'], reply_markup=data['inline_keyboard'])
            await asyncio.sleep(0.05)
            ucount += 1
        except:
            uerror += 1

    for chat_id in chats:
        try:
            await bot.send_message(chat_id[0], data['text'], reply_markup=data['inline_keyboard'])
            await asyncio.sleep(0.05)
            ucount2 += 1
        except:
            uerror2 += 1

    await message.answer(f'''üì° <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>
    
<i>–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</i>
  –ü–æ–ª—É—á–µ–Ω–æ: {ucount:,}
  –ù–µ –ø–æ–ª—É—á–µ–Ω–æ: {uerror:,}

<i>–ß–∞—Ç—ã:</i>
  –ü–æ–ª—É—á–µ–Ω–æ: {ucount2:,}
  –ù–µ –ø–æ–ª—É—á–µ–Ω–æ: {uerror2:,}''')


def reg(dp: Dispatcher):
    dp.register_message_handler(admin_menu, commands='adm')
    dp.register_message_handler(unloading, lambda message: message.text == 'üì• –í—ã–≥—Ä—É–∑–∫–∞')
    dp.register_message_handler(control, lambda message: message.text == 'üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    dp.register_message_handler(RAM_control, lambda message: message.text == 'üíΩ –û–ó–£')
    dp.register_callback_query_handler(RAM_clear, text='ram-clear')
    dp.register_message_handler(new_ads, lambda message: message.text == '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')
    dp.register_message_handler(lambda message, state: new_ads(message, state, type=1), state=new_ads_state.txt)

    dp.register_message_handler(rassilka, lambda message: message.text == 'üìç –†–∞—Å—Å—ã–ª–∫–∞')
    dp.register_message_handler(process_rassilka, state=Mailing.mailing_text)
    dp.register_message_handler(process_rassilka2, state=Mailing.mailing_conf)