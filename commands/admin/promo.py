from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from commands.admin.admin import admin_menu
from commands.db import getads, url_name
from commands.admin.db import *
from commands.main import win_luser
from commands.admin.loger import new_log
from assets.antispam import antispam


class new_promo_state(StatesGroup):
    name = State()
    summ = State()
    activ = State()
    txt = State()


class dell_promo_state(StatesGroup):
    name = State()


class promo_info_state(StatesGroup):
    name = State()


async def promo_menu(message: types.Message):
    if message.chat.type != 'private':
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ"), types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–º–æ –∏–Ω—Ñ–æ"))
    keyboard.add(types.KeyboardButton("üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"))
    await message.answer('üëæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)


async def new_promo(message, state: FSMContext, type='name'):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await promo_menu(message)
        return

    if type == 'name':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        await message.answer("üòÑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ", reply_markup=keyboard)
        await new_promo_state.txt.set()
        return

    if type == 'txt':
        await state.update_data(name=message.text.split()[0])
        await message.answer("üìü –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–∞–±–ª–∏—Ü–∞/—Å—Ç–æ–ª–±–∏–∫ —ç–º–æ–¥–∑–∏)\n\n"
                             "–ü—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–º–æ –Ω–∞ –π–µ–Ω—ã: <code>users/yen üí¥</code>\n\n"
                             "<i>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '-'</i>")
        await new_promo_state.name.set()
        return

    if type == 'summ':
        txt = 'users/balance $' if message.text == '-' else message.text
        await state.update_data(txt=txt)
        await message.answer("üòÉ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É $ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é")
        await new_promo_state.summ.set()
        return

    try:
        summ = message.text.split()[0].replace('–µ', 'e')
        summ = int(float(summ))
    except:
        await message.answer("üòî –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º...")
        return

    if type == 'activ':
        await state.update_data(summ=summ)
        await message.answer("üòä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
        await new_promo_state.activ.set()
        return

    await state.update_data(activ=summ)
    data = await state.get_data()
    await state.finish()

    data2 = (data['name'], data['summ'], data['activ'], data['txt'])
    if (await new_promo_db(data2)):
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await admin_menu(message)
        return

    summ = '{:,}'.format(data['summ']).replace(',', '.')
    summ2 = '{:,}'.format(data['summ'] * data['activ']).replace(',', '.')
    activ = '{:,}'.format(data['activ']).replace(',', '.')
    emj = ' '.join(data['txt'].split()[1:])

    await message.answer(f'''üé∞ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥:\n
–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{data['name']}</code>
–°—É–º–º–∞: {summ}{emj}
–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activ}\n
–û–±—â–∞—è —Å—É–º–º–∞: {summ2}{emj}''')
    await admin_menu(message)


async def promo_info(message, state: FSMContext, type='name'):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await promo_menu(message)
        return

    if type == 'name':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        await message.answer("üíª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ", reply_markup=keyboard)
        await promo_info_state.name.set()
        return

    name = message.text.split()[0]
    res = await promo_info_db(name)
    if not res:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        summ = '{:,}'.format(int(res[1])).replace(',', '.')
        emj = ' '.join(res[3].split()[1:])
        await message.answer(f'''üé∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{res[0]}</code>
–°—É–º–º–∞: {summ}{emj}
–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {res[2]}''')
    await state.finish()
    await promo_menu(message)


async def dell_promo(message, state: FSMContext, type='name'):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await promo_menu(message)
        return

    if type == 'name':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard)
        await dell_promo_state.name.set()
        return

    name = message.text.split()[0]
    res = await dell_promo_db(name)
    if res:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await state.finish()
    await promo_menu(message)


def get_summ(summ):
    if len(str(summ)) > 45:
        return "{:.0e}".format(summ)
    else:
        return '{:,}'.format(summ).replace(',', '.')


@antispam
async def activ_promo(message: types.Message):
    url = await url_name(message.from_user.id)
    rwin, rloser = await win_luser()
    ads = await getads()
    if len(message.text.split()) < 2:
        await message.answer(f"–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {rloser}")
        return

    name = message.text.split()[1]
    res = await activ_promo_db(name, message.from_user.id)

    if res == 'no promo':
        await message.answer(f'–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    if res == 'activated':
        await message.answer(f'–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    if res == 'used':
        await message.answer(f'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    summ = get_summ(int(res[1]))
    emj = ' '.join(res[3].split()[1:])

    await new_log(f'#–ø—Ä–æ–º–æ–∞–∫—Ç–∏–≤\n–ò–≥—Ä–æ–∫: {message.from_user.id}\n–ü—Ä–æ–º–æ: {name}\n–°—É–º–º–∞: {summ}{emj}', 'promo')  # new log
    await message.answer(f"{url}, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <b>{res[0]}</b>!\n–ü–æ–ª—É—á–µ–Ω–æ: <b>{summ}</b>{emj} {rwin}")


def reg(dp: Dispatcher):
    dp.register_message_handler(promo_menu, lambda message: message.text == '‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã', is_admin=True)
    dp.register_message_handler(admin_menu, lambda message: message.text == 'üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', is_admin=True)
    dp.register_message_handler(promo_info, lambda message: message.text == '‚ÑπÔ∏è –ü—Ä–æ–º–æ –∏–Ω—Ñ–æ', is_admin=True)
    dp.register_message_handler(lambda message, state: promo_info(message, state, type='finish'), state=promo_info_state.name)

    dp.register_message_handler(new_promo, lambda message: message.text == 'üìñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ', is_admin=True)
    dp.register_message_handler(lambda message, state: new_promo(message, state, type='txt'), state=new_promo_state.txt)
    dp.register_message_handler(lambda message, state: new_promo(message, state, type='summ'), state=new_promo_state.name)
    dp.register_message_handler(lambda message, state: new_promo(message, state, type='activ'), state=new_promo_state.summ)
    dp.register_message_handler(lambda message, state: new_promo(message, state, type='finish'), state=new_promo_state.activ)

    dp.register_message_handler(dell_promo, lambda message: message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ', is_admin=True)
    dp.register_message_handler(lambda message, state: dell_promo(message, state, type='finish'), state=dell_promo_state.name)
    dp.register_message_handler(activ_promo, lambda message: message.text.lower().startswith('–ø—Ä–æ–º–æ'))
