from datetime import datetime
from aiogram import Dispatcher, types
from commands.db import getstatus, getbalance, getads, getpofildb, url_name, chek_user
from assets.antispam import antispam, new_earning_msg, antispam_earning
from assets.transform import transform
from commands.basic.property import lists
from decimal import Decimal
from assets import kb
from bot import bot


@antispam
async def balance_cmd(message):
    name, balance, btc, bank, yen = await getbalance(message.from_user.id)
    ads = await getads()

    if len(str(balance)) < 21:
        balance = '{:,}'.format(balance).replace(',', '.')
    else:
        balance = Decimal(balance)
        balance = f"{balance:1.1e}"

    bank = '{:,}'.format(bank).replace(',', '.')
    btc = '{:,}'.format(btc).replace(',', '.')
    yen = '{:,}'.format(yen).replace(',', '.')

    await message.answer(f'''üë´ –ù–∏–∫: {name}
üí∞ –î–µ–Ω—å–≥–∏: {balance}$
üí¥ –ô–µ–Ω—ã: {yen}¬•
üè¶ –ë–∞–Ω–∫: {bank}$
üíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {btc}üåê

{ads}''', disable_web_page_preview=True)


@antispam
async def btc_cmd(message):
    name, _, btc, _, _ = await getbalance(message.from_user.id)
    btc = '{:,}'.format(btc).replace(',', '.')
    await message.answer(f'{name}, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {btc} BTC üåê', disable_web_page_preview=True)


async def creat_help_msg(user_id, profil):
    status = await getstatus(user_id)
    url = await url_name(user_id)
    profil = profil.format(url)

    data, _, _ = await getpofildb(user_id)

    fdata = []
    for item in data[:7]:
        transformed_item = await transform(int(item))
        fdata.append(transformed_item)

    status_dict = {0: "–û–±—ã—á–Ω—ã–π", 1: "Standart VIP", 2: "Gold VIP", 3: "Platinum VIP", 4: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
    st = status_dict.get(status, status_dict[0])
    dregister = datetime.fromtimestamp(data[7]).strftime('%Y-%m-%d –≤ %H:%M:%S')

    text = f'''{profil}
ü™™ ID: {user_id}
üèÜ –°—Ç–∞—Ç—É—Å: {st}
üí∞ –î–µ–Ω–µ–≥: {fdata[0]}$
üí¥ –ô–µ–Ω—ã: {data[5]}¬•
üè¶ –í –±–∞–Ω–∫–µ: {fdata[2]}$
üí≥ B-Coins: {data[8]}
üíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {fdata[1]}‡∏ø
üèã –≠–Ω–µ—Ä–≥–∏—è: {data[9]}
üëë –†–µ–π—Ç–∏–Ω–≥: {fdata[4]}
üåü –û–ø—ã—Ç: {fdata[6]}
üé≤ –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {fdata[3]}

<blockquote>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{dregister}</blockquote>'''
    return text


@antispam
async def profil_cmd(message):
    user_id = message.from_user.id
    msg = message.text

    profil = '{0}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:'

    if len(msg.split()) >= 2:
        status = await getstatus(user_id)
        try:
            user_id = int(msg.split()[1])
            if status != 4:
                await message.answer(f'‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏.')
                return

            if not (await chek_user(user_id)):
                await message.answer(f'‚ùå –î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π <b>Telegram ID</b>')
                return

            profil = '–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {0}:'
        except:
            pass

    text = await creat_help_msg(user_id, profil)
    msg = await message.answer(text, reply_markup=kb.profil(user_id))
    await new_earning_msg(msg.chat.id, msg.message_id)


@antispam_earning
async def profil_busines(call: types.CallbackQuery):
    _, business, _ = await getpofildb(call.from_user.id)

    txt = ''
    if business[0]: txt += '\n  üîã –§–µ—Ä–º–∞: –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞'
    if business[1]: txt += '\n  üíº –ë–∏–∑–Ω–µ—Å: –ë–∏–∑–Ω–µ—Å'
    if business[2]: txt += '\n  üå≥ –°–∞–¥: –°–∞–¥'
    if business[3]: txt += '\n  ‚õè –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä'
    if txt == '': txt = '\nü•≤ –£ –≤–∞—Å –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å–æ–≤'

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'üß≥ –í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã:{txt}', reply_markup=kb.profil_back(call.from_user.id))


@antispam_earning
async def profil_property(call: types.CallbackQuery):
    _, _, data = await getpofildb(call.from_user.id)

    txt = ''
    if data[4]:
        name = lists.phones.get(data[4])
        txt += f'\n  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {name[0]}'

    if data[2]:
        name = lists.cars.get(data[2])
        txt += f'\n  üöò –ú–∞—à–∏–Ω–∞: {name[0]}'

    if data[1]:
        name = lists.helicopters.get(data[1])
        txt += f'\n  üöÅ –í–µ—Ä—Ç–æ–ª—ë—Ç: {name[0]}'

    if data[6]:
        name = lists.planes.get(data[6])
        txt += f'\n  üõ© –°–∞–º–æ–ª—ë—Ç: {name[0]}'

    if data[3]:
        name = lists.yahts.get(data[3])
        txt += f'\n  üõ• –Ø—Ö—Ç–∞: {name[0]}'

    if data[5]:
        name = lists.house.get(data[5])
        txt += f'\n  üè† –î–æ–º: {name[0]}'

    if txt == '': txt = '\nü•≤ –£ –≤–∞—Å –Ω–µ—Ç—É –∏–º—É—â–µ—Å—Ç–≤–∞'

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'üì¶ –í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:{txt}', reply_markup=kb.profil_back(call.from_user.id))


@antispam_earning
async def profil_back(call: types.CallbackQuery):
    text = await creat_help_msg(call.from_user.id, '{0}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=text, reply_markup=kb.profil(call.from_user.id))


def reg(dp: Dispatcher):
    dp.register_message_handler(balance_cmd, lambda message: message.text in ['–±', '–ë', '–ë–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å'])
    dp.register_message_handler(btc_cmd, lambda message: message.text in ['–±–∏—Ç–∫–æ–∏–Ω—ã', '–ë–∏—Ç–∫–æ–∏–Ω—ã'])
    dp.register_message_handler(profil_cmd, lambda message: message.text.lower().startswith('–ø—Ä–æ—Ñ–∏–ª—å'))
    dp.register_callback_query_handler(profil_busines, text_startswith='profil-busines')
    dp.register_callback_query_handler(profil_back, text_startswith='profil-back')
    dp.register_callback_query_handler(profil_property, text_startswith='profil-property')